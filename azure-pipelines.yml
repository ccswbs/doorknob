# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

schedules:
- cron: "0 4 * * *"
  displayName: Daily midnight EST build (4am UTC)
  branches:
    include:
    - main
  always: true
- cron: "0 10,16 * * *"
  displayName: Twice a day build (6am and 12pm EST / 10am and 4pm UTC )
  branches:
    include:
    - main
  always: true

variables:
- group: ug-doorknob
- name: _path_prefix
  value: '$(PATH_PREFIX)'
- name: _path_prefix_url
  value: '$(PATH_PREFIX_URL)'
- name: _gatsby_cache_folder
  value: '.cache'
- name: _gatsby_public_folder
  value: 'public'
- name: _npm_node_modules
  value: 'node_modules'

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- task: Cache@2
  inputs:
    key: '_npm_node_modules | "$(Agent.OS)" | "$(Build.SourceBranch)"'
    path: $(_npm_node_modules)
  displayName: 'Retrieve cached NPM folder'

- task: Npm@1
  inputs:
    command: 'install'

- task: Cache@2
  inputs:
    key: 'gatsby_cache | "$(Agent.OS)" | "$(Build.SourceBranch)"'
    path: $(_gatsby_cache_folder)
  displayName: 'Retrieve cached Gatsby .cache folder'

- task: Cache@2
  inputs:
    key: 'gatsby_public | "$(Agent.OS)" | "$(Build.SourceBranch)"'
    path: $(_gatsby_public_folder)
  displayName: 'Retrieve cached Gatsby public folder'

# - script: npm run build-prefix
#   displayName: 'Build gatsby in sub-directory'
#   condition: eq(variables._path_prefix, 'true')

# - script: npm run build
#   displayName: 'Build gatsby'
#   condition: ne(variables._path_prefix, 'true')

- script: npm run build
  displayName: 'Build gatsby'

# - bash: |
#     if [ -d "$(Build.SourcesDirectory)/public/$(_path_prefix_url)/_gatsby/image" ]; then
#       cd $(Build.SourcesDirectory)/public/$(_path_prefix_url)/_gatsby/
#       rsync -a image/ $(Build.SourcesDirectory)/public/_gatsby/image/
#       rm -rf $(Build.SourcesDirectory)/public/$(_path_prefix_url)/
#     fi
#   displayName: 'Fix images in extra sub-directory'
#   condition: eq(variables._path_prefix, 'true')

- bash: |
    # Define absolute paths
    source_dir="$(Build.SourcesDirectory)/public/_gatsby"
    target_dir="$(Build.SourcesDirectory)/public/assets/_gatsby"
    index_file="$(Build.SourcesDirectory)/public/index.html"

    url="$(_path_prefix_url)"
    subdirectory="${url/\//}"

    if [ -d "$source_dir" ]; then
      # Move _gatsby to assets/_gatsby
      mv "$source_dir" "$target_dir"

      # Update links in index.html
      sed -i "s|/_gatsby|/$subdirectory/assets/_gatsby|g" "$index_file"
      sed -i "s|/static/|/$subdirectory/static/|g" "$index_file"
    fi

  displayName: '(Path Prefix) Move _gatsby to /$subdirectory/assets/_gatsby'
  condition: eq(variables._path_prefix, 'true')


- bash: |
    # Define absolute paths
    source_dir="$(Build.SourcesDirectory)/public/_gatsby"
    target_dir="$(Build.SourcesDirectory)/public/assets/_gatsby"
    index_file="$(Build.SourcesDirectory)/public/index.html"

    if [ -d "$source_dir" ]; then
      # Move _gatsby to assets/_gatsby      
      mv "$source_dir" "$target_dir"

      # Update links in index.html
      sed -i 's|/_gatsby|/assets/_gatsby|g' "$index_file"
    fi

  displayName: 'Move _gatsby to assets/_gatsby'
  condition: ne(variables._path_prefix, 'true')

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/public'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
